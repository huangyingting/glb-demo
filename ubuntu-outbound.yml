#cloud-config
write_files:
  - path: /usr/lib/networkd-dispatcher/routable.d/90-vxlan-up
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # filename: 90-vxlan-up
      # eth0 wan interface
      # eth1 lan interface which receives vxlan from gateway load balancer
      if [ "$IFACE" == "eth1" ]; then
        route add -host 168.63.129.16 gw 10.110.1.1 dev $IFACE metric 80
        ip link add glbint type vxlan id 800 remote 10.110.1.128 dstport 10800 dev $IFACE
        ip link set glbint up
        ip link add glbext type vxlan id 801 remote 10.110.1.128 dstport 10801 dev $IFACE
        ip link set glbext up
        ip link add name br0 type bridge
        ip link set dev br0 up
        ip link set dev glbint master br0
        ip link set dev glbext master br0
        ip link set $IFACE mtu 4000
        ip link set glbint mtu 3900
        ip link set glbext mtu 3900
        ip link set br0 mtu 3900
        # No need iptables bridge filtering  
        # modprobe br_netfilter
        # sysctl -w net.bridge.bridge-nf-call-iptables=1
        sysctl -w net.ipv4.ip_forward=1
        for i in /proc/sys/net/ipv4/conf/*/rp_filter; do
          echo 0 > "$i"
        done
        # To implement bridge mode
        ebtables -t broute -A BROUTING -p IPv4 --ip-proto tcp --ip-src {0} --ip-dport 80 -j redirect --redirect-target DROP
        iptables -t nat -A POSTROUTING -p tcp -s {0} --dport 80 -o eth0 -j MASQUERADE
        ip route add {0} dev br0
        arp -s {0} 12:34:56:78:9a:bc
      fi
  - path: /usr/lib/networkd-dispatcher/off.d/90-vxlan-down
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # filename: 90-vxlan-down
      if [ "$IFACE" == "eth1" ]; then
        ip link set br0 down
        ip link delete br0 type bridge
        ip link delete glbext type vxlan
        ip link delete glbint type vxlan
      fi
