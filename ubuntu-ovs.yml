#cloud-config
package_update: true
package_upgrade: true
packages:
  - docker.io
write_files:
  - path: /usr/lib/networkd-dispatcher/routable.d/90-vxlan-up
    owner: root:root
    permissions: '0755'
    content: |
      #!/bin/bash
      # filename: 90-vxlan-up
      # eth0 wan interface
      # eth1 lan interface which receives vxlan from gateway load balancer      
      if [ "$IFACE" == "eth1" ]; then
        ip rule add from ${{IP_ADDRS%% *}} to 168.63.129.16 lookup glbrt
        ip route add 168.63.129.16 via 10.110.1.1 dev $IFACE table glbrt   
        ip link set $IFACE mtu 4000
        sysctl -w net.ipv4.ip_forward=1
        sysctl -w net.ipv4.conf.all.route_localnet=1
      fi
  - path: /etc/iproute2/rt_tables
    content: |
      128 glbrt 
    append: true
  - path: /etc/systemd/system/glb.service
    content: |
      [Unit]
      Description=Glb OpenVSwitch Script Service
      After=openvswitch-switch.service

      [Service]
      type=oneshot
      RemainAfterExit=true
      ExecStart=/bin/bash /usr/sbin/glb-start.sh
      ExecStop=/bin/bash /usr/sbin/glb-stop.sh

      [Install]
      WantedBy=multi-user.target
  - path: /usr/sbin/glb-start.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      # Parameters
      frontend_ip="52.187.64.200"
      loc_int_net="172.16.70.0/24"
      loc_ext_net="172.16.80.0/24"
      loc_int_nat_range="172.16.70.20-172.16.70.120"
      loc_ext_nat_range="172.16.80.20-172.16.80.120"
      pseudo_int_net_mac="0x123456789abc"
      pseudo_ext_net_mac="0x123456789abc"
      loc_int_port_mac="70:70:70:70:70:70"
      loc_ext_port_mac="80:80:80:80:80:80"
      # Create OVS vxlan ports for gateway load balancer inbound and outbound tunnels
      ovs-vsctl add-br br-glb
      ovs-vsctl add-port br-glb glb-int -- set interface glb-int type=vxlan options:remote_ip=10.110.1.128 options:key=800 options:dst_port=10800
      ovs-vsctl add-port br-glb glb-ext -- set interface glb-ext type=vxlan options:remote_ip=10.110.1.128 options:key=801 options:dst_port=10801

      # Configure loc-int and loc-ext as local routers
      ovs-vsctl add-port br-glb loc-int -- set Interface loc-int type=internal
      ip link set dev loc-int address ${{loc_int_port_mac}}
      ip link set loc-int up
      ip route add ${{loc_int_net}} dev loc-int scope link

      ovs-vsctl add-port br-glb loc-ext -- set Interface loc-ext type=internal
      ip link set dev loc-ext address ${{loc_ext_port_mac}}
      ip link set loc-ext up
      ip route add ${{loc_ext_net}} dev loc-ext scope link

      # Iptables nat rules
      iptables -t nat -A POSTROUTING -p tcp -s ${{loc_int_net}} --dport 80 -o eth0 -j MASQUERADE
      iptables -t nat -A PREROUTING -p tcp -s ${{loc_ext_net}} -d ${{frontend_ip}} --dport 80 -i loc-ext -j DNAT --to-destination 127.0.0.1:6080

      # Create a pseudo gateway for loc_int_net, respond to ARP request and ICMP ping
      ovs-ofctl add-flow br-glb "table=0,priority=0,actions=NORMAL"
      ovs-ofctl add-flow br-glb "table=0,in_port=loc-int,arp,arp_tpa=${{loc_int_net}},arp_op=1 actions=move:NXM_OF_ETH_SRC[]->NXM_OF_ETH_DST[],set_field:${{loc_int_port_mac}}->eth_src,load:0x2->NXM_OF_ARP_OP[],move:NXM_NX_ARP_SHA[]->NXM_NX_ARP_THA[],load:0x123456789abc->NXM_NX_ARP_SHA[],push:NXM_OF_ARP_SPA[],push:NXM_OF_ARP_TPA[],pop:NXM_OF_ARP_SPA[],pop:NXM_OF_ARP_TPA[],IN_PORT"
      ovs-ofctl add-flow br-glb "table=0,in_port=loc-int,icmp,nw_dst=${{loc_int_net}},icmp_type=8,icmp_code=0,actions=push:NXM_OF_ETH_SRC[],push:NXM_OF_ETH_DST[],pop:NXM_OF_ETH_SRC[],pop:NXM_OF_ETH_DST[],push:NXM_OF_IP_SRC[],push:NXM_OF_IP_DST[],pop:NXM_OF_IP_SRC[],pop:NXM_OF_IP_DST[],load:0xff->NXM_NX_IP_TTL[],load:0->NXM_OF_ICMP_TYPE[],IN_PORT"
      ovs-ofctl add-flow br-glb "table=0,in_port=loc-ext,arp,arp_tpa=${{loc_ext_net}},arp_op=1 actions=move:NXM_OF_ETH_SRC[]->NXM_OF_ETH_DST[],set_field:${{loc_ext_port_mac}}->eth_src,load:0x2->NXM_OF_ARP_OP[],move:NXM_NX_ARP_SHA[]->NXM_NX_ARP_THA[],load:0x123456789abc->NXM_NX_ARP_SHA[],push:NXM_OF_ARP_SPA[],push:NXM_OF_ARP_TPA[],pop:NXM_OF_ARP_SPA[],pop:NXM_OF_ARP_TPA[],IN_PORT"
      ovs-ofctl add-flow br-glb "table=0,in_port=loc-ext,icmp,nw_dst=${{loc_ext_net}},icmp_type=8,icmp_code=0,actions=push:NXM_OF_ETH_SRC[],push:NXM_OF_ETH_DST[],pop:NXM_OF_ETH_SRC[],pop:NXM_OF_ETH_DST[],push:NXM_OF_IP_SRC[],push:NXM_OF_IP_DST[],pop:NXM_OF_IP_SRC[],pop:NXM_OF_IP_DST[],load:0xff->NXM_NX_IP_TTL[],load:0->NXM_OF_ICMP_TYPE[],IN_PORT"

      # Redirect glb outbound traffic, stateful snat with ct_state
      # Outbound
      ovs-ofctl add-flow br-glb "table=0,in_port=glb-int,tcp,tp_dst=80,nw_src=${{frontend_ip}},ct_state=-trk,actions=ct(table=1,zone=1,nat)"
      ovs-ofctl add-flow br-glb "table=1,in_port=glb-int,tcp,tp_dst=80,nw_src=${{frontend_ip}},ct_state=+trk+new,ct_zone=1,actions=ct(commit,table=1,zone=1,nat(src=${{loc_int_nat_range}})),mod_dl_dst:${{loc_int_port_mac}},loc-int"
      ovs-ofctl add-flow br-glb "table=1, in_port=glb-int,tcp,tcp_dst=80,nw_src=${{loc_int_net}},ct_state=+trk+est,ct_zone=1,actions=mod_dl_dst:${{loc_int_port_mac}},loc-int"
      # Inbound
      ovs-ofctl add-flow br-glb "table=0,in_port=loc-int,tcp,tp_src=80,nw_dst=${{loc_int_net}},ct_state=+trk,actions=ct(table=1,zone=1,nat)"
      ovs-ofctl add-flow br-glb "table=1,in_port=loc-int,tcp,tcp_src=80,nw_dst=${{frontend_ip}},ct_zone=1,ct_state=+trk+est,actions=glb-int"

      # Redirect glb inbound traffic, stateful snat with ct_state
      # Inbound
      ovs-ofctl add-flow br-glb "table=0,in_port=glb-ext,tcp,tp_dst=80,nw_dst=${{frontend_ip}},ct_state=-trk,actions=ct(table=1,zone=1,nat)"
      ovs-ofctl add-flow br-glb "table=1,in_port=glb-ext,tcp,tp_dst=80,nw_dst=${{frontend_ip}},ct_state=+trk+new,ct_zone=1,actions=ct(commit,table=1,zone=1,nat(src=${{loc_ext_nat_range}})),mod_dl_dst:${{loc_ext_port_mac}},loc-ext"
      ovs-ofctl add-flow br-glb "table=1, in_port=glb-ext,tcp,tcp_dst=80,nw_src=${{loc_ext_net}},nw_dst=${{frontend_ip}},ct_state=+trk+est,ct_zone=1,actions=mod_dl_dst:${{loc_ext_port_mac}},loc-ext"
      # Outbound
      ovs-ofctl add-flow br-glb "table=0,in_port=loc-ext,tcp,tp_src=80,nw_dst=${{loc_ext_net}},nw_src=${{frontend_ip}},ct_state=+trk,actions=ct(table=1,zone=1,nat)"
      ovs-ofctl add-flow br-glb "table=1,in_port=loc-ext,tcp,tcp_src=80,nw_src=${{frontend_ip}},ct_zone=1,ct_state=+trk+est,actions=glb-ext"
  - path: /usr/sbin/glb-stop.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      ovs-vsctl del-br br-glb
runcmd:
  - TEMP_DEB="$(mktemp)" && wget -O "$TEMP_DEB" 'https://github.com/huangyingting/glb-demo/releases/download/ovs/libopenvswitch-dev_2.16.1-1_amd64.deb' && dpkg -i "$TEMP_DEB" && rm -f "$TEMP_DEB"
  - TEMP_DEB="$(mktemp)" && wget -O "$TEMP_DEB" 'https://github.com/huangyingting/glb-demo/releases/download/ovs/openvswitch-common_2.16.1-1_amd64.deb' && dpkg -i "$TEMP_DEB" && rm -f "$TEMP_DEB"
  - TEMP_DEB="$(mktemp)" && wget -O "$TEMP_DEB" 'https://github.com/huangyingting/glb-demo/releases/download/ovs/openvswitch-switch_2.16.1-1_amd64.deb' && dpkg -i "$TEMP_DEB" && rm -f "$TEMP_DEB"
  - systemctl daemon-reload && systemctl enable glb.service && systemctl start glb.service
  - docker run -d --restart unless-stopped --net=host --name squid huangyingting/nginx